#lang racket
; Cory Munselle
; Program 06

; Thanks to Michael for assistance in understanding some of the underlying concepts and helping me
; troubleshoot my code.
; Also, thank you Prof. Marshall for the same thing!
; Note: I kept the functions separate for readability. I know it TECHNICALLY
; says one function but let's be real this is way easier to read and it would work
; just fine inside of the quicksort function anyway

; please don't count off im sorry

; This is the main function that uses all of the helper functions for recursion
; Takes in one list as a parameter
(define (myQuicksort listToSplit)
  ; Checks if the list is either empty, has only one value, or has duplicates
  (if (or (null? listToSplit) (null? (cdr listToSplit)) (checkDuplicates listToSplit))
      ; If any of the conditions are true, just return the list
      listToSplit
      ; recurses using the lists generated by the lessThan and greaterThan functions
      ; and appends them
      (append (myQuicksort (lessThan listToSplit (calcListAverage listToSplit 0 0)))
      (myQuicksort (greaterThan listToSplit (calcListAverage listToSplit 0 0))))))

; Helper function to return the items in the list greater than the average
; Takes two parameters, a list and the average for comparison
(define (greaterThan listForSort average)
  (if (null? listForSort)
      listForSort 
      (if (> (car listForSort) average)
          (cons (car listForSort) (greaterThan (cdr listForSort) average))
          (greaterThan (cdr listForSort) average))))

; Helper function to return the items in the list less than the average
; Takes two parameters, a list and the average for comparison
(define (lessThan listForSort average)
  (if (null? listForSort)
      listForSort 
      (if (< (car listForSort) average)
          (cons (car listForSort) (lessThan (cdr listForSort) average))
          (lessThan (cdr listForSort) average))))

; Helper function to calculate the average of the passed in list
; Takes three parameters, a list and two values for keeping track of the values
(define (calcListAverage baseList sumSoFar totalSoFar)
    (if (null? baseList)
        (/ sumSoFar totalSoFar)
        (calcListAverage (cdr baseList) (+ sumSoFar (car baseList)) (+ totalSoFar 1))))

; Helper function to find if there is duplicates in the program
; Takes a list as a parameter
(define (checkDuplicates inputList)
  ; If the list has just one item, return true immediately
  (if (null? (cdr inputList))
      #t
      ; else if the first value in the list is equal to the second value in the list
      (if (= (car inputList) (car (cdr inputList)))
          ; recurse with the next value
          (checkDuplicates (cdr inputList))
          ; if they aren't equal, return false (list isn't sorted)
          #f)))
          

(myQuicksort '(20 13 74 5 12 9 22 95 22 6 101 72 3 53 33 21 96))